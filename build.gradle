plugins {
    id 'application'
    id 'jacoco'
    id 'org.sonarqube' version '4.1.0.3113'
}

repositories {
    mavenCentral()

    maven {
        url = uri('https://maven.pkg.github.com/openehr-java-api/openehr-am-4j')
        credentials {
            username = project.findProperty('gpr.user')
            password = project.findProperty('gpr.key')
        }
    }
    maven {
        url = uri('https://maven.pkg.github.com/openehr-java-api/openehr-base-4j')
        credentials {
            username = project.findProperty('gpr.user')
            password = project.findProperty('gpr.key')
        }
    }
    maven {
        url = uri('https://maven.pkg.github.com/openehr-java-api/openehr-rm-4j')
        credentials {
            username = project.findProperty('gpr.user')
            password = project.findProperty('gpr.key')
        }
    }
    maven {
        url = uri('https://maven.pkg.github.com/openehr-java-api/openehr-term-4j')
        credentials {
            username = project.findProperty('gpr.user')
            password = project.findProperty('gpr.key')
        }
    }
}

ext['openehrAmVersion'] = '2.2.0-alpha-9'
ext['openehrBaseVersion'] = '1.2.0-alpha-2'
ext['openehrRmVersion'] = '1.1.0-alpha-16'
ext['openehrTermVersion'] = '2.4.0-alpha-5'

dependencies {
    implementation 'com.beust:jcommander:1.82'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.1'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'com.squareup:javapoet:1.13.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.slf4j:slf4j-simple:1.7.32'

    // Dependencies on generated packages, to be able to infer import paths
    implementation "com.experimental-software.am:aom2-api:${openehrAmVersion}"
    implementation "com.experimental-software.base:base-types-api:${openehrBaseVersion}"
    implementation "com.experimental-software.base:foundation-types-api:${openehrBaseVersion}"
    implementation "com.experimental-software.base:resource-model-api:${openehrBaseVersion}"
    implementation "com.experimental-software.rm:common-api:${openehrRmVersion}"
    implementation "com.experimental-software.rm:data-structures-api:${openehrRmVersion}"
    implementation "com.experimental-software.rm:data-types-api:${openehrRmVersion}"
    implementation "com.experimental-software.rm:demographic-api:${openehrRmVersion}"
    implementation "com.experimental-software.rm:ehr-api:${openehrRmVersion}"
    implementation "com.experimental-software.rm:ehr-extract-api:${openehrRmVersion}"
    implementation "com.experimental-software.rm:integration-api:${openehrRmVersion}"
    implementation "com.experimental-software.rm:support-api:${openehrRmVersion}"
    implementation "com.experimental-software.term:support-terminology-api:${openehrTermVersion}"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'

    // Lombok - https://projectlombok.org
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
    testCompileOnly 'org.projectlombok:lombok:1.18.26'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
}

application {
    mainClass = 'com.experimental_software.api_generator.App'
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

jacocoTestReport {
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "experimental-software_java-api-generator"
        property "sonar.organization", "experimental-software"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
